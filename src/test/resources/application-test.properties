# H2 In-Memory Database Configuration for Tests
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=LEGACY
# Add MODE=LEGACY to the URL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA and Hibernate Configuration
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# SQL Initialization for Test Data
# IMPORTANT: This will load data.sql automatically every time a new Spring context starts.
# Combined with @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD),
# this ensures data.sql runs before EACH test method after a context restart.
# Ensure your data.sql does NOT have DELETE statements if using ddl-auto=create-drop,
# as the tables are already cleared by create-drop.

# Defer datasource initialization to allow Hibernate to create schema first
spring.jpa.defer-datasource-initialization=true

# Logging Configuration for SQL
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# JWT Configuration for Tests (ensure these match your application-wide properties if applicable)
jwt.secret=aVerySecureTestSecretKeyForHappyTravelAppTestingOnly12345
jwt.expiration=3600000

# Spring Security CSRF Configuration for Tests
# Disabling CSRF in tests simplifies testing POST/PUT/DELETE requests.
# If you need to test CSRF protection, remove or comment this line.
spring.security.web.csrf.disable=true
# Add MODE=LEGACY to the URL
# Change the default port for tests to avoid conflicts
server.port=8081